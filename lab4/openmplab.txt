openmplab.txt
004-817-743

This lab involves the method of speeding up programs without invoking memory leaks.

1. The first step is to upload the tar file to my linux server and try to unzip it. I did this step by creating a directory called openmplab.

2. Then we need to invoke and run the program on the server and try to determine the bottleneck of the function(which function takes the longest time)

As is suggested by the spec, we use the gprof to achieve our goal:

$ make seq
gcc -o seq  -O3 filter.c main.c func.c util.c -lm
[classzho@lnxsrv09 ~/openmplab]$ ./seq
FUNC TIME : 0.738334
TOTAL TIME : 2.491403

Now we compile the program with a profiler, to determine where the bottlenecks are. We do this through the commands make seq GPROF=1, ./seq, and gprof seq | less. This yields the following output:

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 65.31      0.60     0.60       15    40.05    42.59  func1
 21.77      0.80     0.20  5177344     0.00     0.00  rand2
  2.18      0.82     0.02       15     1.34     1.34  func2
  2.18      0.84     0.02        1    20.03   182.27  addSeed
  2.18      0.86     0.02                             sequence
  1.09      0.87     0.01   491520     0.00     0.00  findIndexBin
  1.09      0.88     0.01       15     0.67     0.67  func3
  1.09      0.89     0.01       15     0.67     0.67  func4
  1.09      0.90     0.01       15     0.67     1.34  func5
  1.09      0.91     0.01        2     5.01     5.01  init
  1.09      0.92     0.01        1    10.01    10.01  imdilateDisk
  0.00      0.92     0.00   983042     0.00     0.00  round
  0.00      0.92     0.00       16     0.00     0.00  dilateMatrix
  0.00      0.92     0.00       15     0.00     0.00  rand1
  0.00      0.92     0.00        2     0.00     0.00  get_time
  0.00      0.92     0.00        1     0.00     0.00  elapsed_time
  0.00      0.92     0.00        1     0.00     0.00  fillMatrix
  0.00      0.92     0.00        1     0.00     0.00  func0

From the form above, we can clearly see that function 1 is the main bottleneck that is slowing the speed of our program down. Hence, my main task is to improve function1 and also do some other improvement on other functions as well. Since function 3,4,0 does not take much time, I will shift my focus on the other few functions.  

3. Now it is time to determine how to speed up the functions in the source code.

Now, as suggested by the spec, I can use the openmp method to speed up the function. After some observations and experiments, I used the following steps to optimize the function:

First, I did so by using the #pragma omp parallel for declaration, along with seeting certain variables to either private or firstprivate to prevent the threads to clash when accessing or modifying variables. The reduction, private, and firstprivate allowed proper access of accumulators and the indexing inside nested for-loops.

Second, I also limited each parallelization to 30, because I noticed when I let the number of threads be the default maximum 32, the FUNC TIME varied and usually did not improve significantly. Instead, I make it 30 to allow 2 free threads to run the other processes that the program may need to run. The slowing down may be due to frequent context switching when there are not enough available threads to go around. By limiting it to 30, the speedup was significantly greater.

After making several changes in the func.c file, I tried to run the program again and see how much speed up that my changes have done to the original program. I use the following command:

$ ./omp
FUNC TIME : 0.037933
TOTAL TIME : 1.919162

We can see that as shown above, our function running time has been cut and improved extraordinarily. The speedup is 0.738334/0.037933 = 19.46(which should be enough hopefully)
Then I tried to find the separate running time to see that my method of improvement actually work. By using the same command as the previous part, I get the following result:

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 64.25      0.43     0.43       31    13.89    15.85  filter
 16.44      0.54     0.11  4221787     0.00     0.00  rand2
  8.96      0.60     0.06    12165     0.00     0.00  findIndexBin
  4.48      0.63     0.03        1    30.03   139.44  addSeed
  2.99      0.65     0.02        2    10.01    10.01  init
  1.49      0.66     0.01        1    10.01    10.01  imdilateDisk
  1.49      0.67     0.01                             sequence
  0.00      0.67     0.00    54977     0.00     0.00  round
  0.00      0.67     0.00       16     0.00     0.00  dilateMatrix
  0.00      0.67     0.00       15     0.00     0.00  func1
  0.00      0.67     0.00       15     0.00     0.00  func2
  0.00      0.67     0.00       15     0.00     0.00  func3
  0.00      0.67     0.00       15     0.00     0.00  func4
  0.00      0.67     0.00       15     0.00     0.00  func5
  0.00      0.67     0.00       15     0.00     0.00  rand1
  0.00      0.67     0.00        2     0.00     0.00  get_time
  0.00      0.67     0.00        1     0.00     0.00  elapsed_time
  0.00      0.67     0.00        1     0.00     0.00  fillMatrix

We can see that we have achieved the result we want, function 1,2,5 has been improved.

4. In this step, I try to make sure that the improved version of the function did not change the result of the program since the none of the improvement will make sense if our program was changed and will produce a different result afterwards.

We use the following command:

make omp GPROF=1
gcc -o omp  -O2 -pg -fopenmp filter.c main.c func.c util.c -lm

[classzho@lnxsrv09 ~/openmplab]$ ./omp
FUNC TIME : 0.129865
TOTAL TIME : 2.041713

[classzho@lnxsrv09 ~/openmplab]$ gprof omp | less
[classzho@lnxsrv09 ~/openmplab]$ make check
gcc -o omp  -O3 -fopenmp filter.c main.c func.c util.c -lm
cp omp filter
./filter
FUNC TIME : 0.047029
TOTAL TIME : 1.815350
diff --brief correct.txt output.txt

We can see the the functionality has not been changed according to the above result, which is a good thing for us since now our improvement actually make sense.

5. Finally, we check for memory leak.

I used the following command and produce the following result:

[classzho@lnxsrv09 ~/openmplab]$ make omp MTRACE=1
gcc -o omp  -O3 -DMTRACE -fopenmp filter.c main.c func.c util.c -lm
[classzho@lnxsrv09 ~/openmplab]$ ./omp
FUNC TIME : 0.038022
TOTAL TIME : 1.839777
[classzho@lnxsrv09 ~/openmplab]$ make checkmem
mtrace filter mtrace.out || true
[classzho@lnxsrv09 ~/openmplab]$ mtrace filter mtrace.out || true
Memory not freed:
-----------------
           Address     Size     Caller
0x00000000016b90e0   0x1e90  at 0x7fa16b2fb869
0x00000000016baf80     0xc0  at 0x7fa16b2fb869
0x00000000016bb050     0xf8  at 0x7fa16b2fb8b9
0x00000000016bb150    0x240  at 0x7fa16b82bf45
0x00000000016bb3a0    0x240  at 0x7fa16b82bf45
0x00000000016bb5f0    0x240  at 0x7fa16b82bf45
0x00000000016bb840    0x240  at 0x7fa16b82bf45
0x00000000016bba90    0x240  at 0x7fa16b82bf45
0x00000000016bbce0    0x240  at 0x7fa16b82bf45
0x00000000016bbf30    0x240  at 0x7fa16b82bf45
0x00000000016bc180    0x240  at 0x7fa16b82bf45
0x00000000016bc3d0    0x240  at 0x7fa16b82bf45
0x00000000016bc620    0x240  at 0x7fa16b82bf45
0x00000000016bc870    0x240  at 0x7fa16b82bf45
0x00000000016bcac0    0x240  at 0x7fa16b82bf45
0x00000000016bcd10    0x240  at 0x7fa16b82bf45
0x00000000016bcf60    0x240  at 0x7fa16b82bf45
0x00000000016bd1b0    0x240  at 0x7fa16b82bf45
0x00000000016bd400    0x240  at 0x7fa16b82bf45
0x00000000016bd650    0x240  at 0x7fa16b82bf45
0x00000000016bd8a0    0x240  at 0x7fa16b82bf45
0x00000000016bdaf0    0x240  at 0x7fa16b82bf45
0x00000000016bdd40    0x240  at 0x7fa16b82bf45
0x00000000016bdf90    0x240  at 0x7fa16b82bf45
0x00000000016be1e0    0x240  at 0x7fa16b82bf45
0x00000000016be430    0x240  at 0x7fa16b82bf45
0x00000000016be680    0x240  at 0x7fa16b82bf45
0x00000000016be8d0    0x240  at 0x7fa16b82bf45
0x00000000016beb20    0x240  at 0x7fa16b82bf45
0x00000000016bed70    0x240  at 0x7fa16b82bf45
0x00000000016befc0    0x240  at 0x7fa16b82bf45
0x00000000016bf210    0x240  at 0x7fa16b82bf45

The function do produce some unfreed memory as indicated by the above result. Honestly the result above scared me a lot at first glance because I thought some part of my function invokes the memory leak situation. However, after thorough consideration and suggested by the TA on piazza, the memory leak notation should not be taken very seriously since we use the openmp method to improve the function and the process itself involves some dynamic memory. The potential memory leak should be gone at the end of the process.
